/* eslint-env browser */

/* global Webex */

/* eslint-disable require-jsdoc */
/* eslint-disable no-unused-vars */
/* eslint-disable no-console */
/* eslint-disable no-global-assign */
/* eslint-disable no-multi-assign */

// Globals
let webex;

// Authentication Section --------------------------------------------------

const tokenElm = document.querySelector('#access-token');
const saveElm = document.querySelector('#access-token-save');
const authStatusElm = document.querySelector('#access-token-status');
const registerElm = document.querySelector('#registration-register');
const unregisterElm = document.querySelector('#registration-unregister');
const registrationStatusElm = document.querySelector('#registration-status');

function initWebex() {
  console.log('Authentication#initWebex()');

  tokenElm.disabled = true;
  saveElm.disabled = true;
  authStatusElm.innerHTML = 'initializing...';

  webex = window.webex = Webex.init({
    credentials: {
      access_token: tokenElm.value
    }
  });

  webex.once('ready', () => {
    console.log('Authentication#initWebex() :: Webex Ready');
    registerElm.disabled = false;
    authStatusElm.innerHTML = 'Saved';
  });
}

function register() {
  console.log('Authentication#register()');
  registerElm.disabled = true;
  unregisterElm.disabled = true;
  registrationStatusElm.innerHTML = 'Registering...';

  webex.meetings.register()
    .then(() => {
      console.log('Authentication#register() :: successfully registered');
      unregisterElm.disabled = false;
    })
    .catch((error) => {
      console.warn('Authentication#register() :: error registering', error);
      registerElm.disabled = false;
    })
    .finally(() => {
      registrationStatusElm.innerHTML = webex.meetings.registered ?
        'Registered' :
        'Not Registered';
    });
}

function unregister() {
  console.log('Authentication#unregister()');
  registerElm.disabled = true;
  unregisterElm.disabled = true;
  registrationStatusElm.innerHTML = 'Unregistering...';

  webex.meetings.unregister()
    .then(() => {
      console.log('Authentication#register() :: successfully unregistered');
      registerElm.disabled = false;
    })
    .catch((error) => {
      console.warn('Authentication#register() :: error unregistering', error);
      unregisterElm.disabled = false;
    })
    .finally(() => {
      registrationStatusElm.innerHTML = webex.meetings.regisered ?
        'Registered' :
        'Not Registered';
    });
}

// Meetings Management Section --------------------------------------------------

const createMeetingDestinationElm = document.querySelector('#create-meeting-destination');
const createMeetingActionElm = document.querySelector('#create-meeting-action');
const meetingsJoinDeviceElm = document.querySelector('#meetings-join-device');
const meetingsJoinPinElm = document.querySelector('#meetings-join-pin');
const meetingsJoinModeratorElm = document.querySelector('#meetings-join-moderator');
const meetingsListCollectElm = document.querySelector('#meetings-list-collect');
const meetingsListElm = document.querySelector('#meetings-list');
const meetingsAddMediaElm = document.querySelector('#meetings-add-media');
const meetingsLeaveElm = document.querySelector('#meetings-leave');
const meetingsCurrentDetailsElm = document.querySelector('#meetings-current-details');

function generateMeetingsListItem(meeting) {
  const itemElm = document.createElement('div');
  const joinElm = document.createElement('button');
  const detailsElm = document.createElement('label');

  itemElm.id = `meeting-list-item-${meeting.id}`;
  itemElm.key = meeting.id;

  joinElm.onclick = () => joinMeeting(meeting.id);
  joinElm.type = 'button';
  joinElm.value = meeting.id;
  joinElm.innerHTML = 'meeting.join()';

  detailsElm.innerHTML = meeting.destination ||
    meeting.sipUri ||
    meeting.id;

  itemElm.appendChild(joinElm);
  itemElm.appendChild(detailsElm);

  return itemElm;
}

function collectMeetings() {
  console.log('MeetingsManagement#collectMeetings()');

  webex.meetings.syncMeetings()
    .then(() => new Promise((resolve) => {
      setTimeout(() => resolve(), 200);
    }))
    .then(() => {
      console.log('MeetingsManagement#collectMeetings() :: successfully collected meetings');
      const meetings = webex.meetings.getAllMeetings();

      if (Object.keys(meetings).length === 0) {
        meetingsListElm.innerHTML = 'There are currently no meetings to display';

        return;
      }

      meetingsListElm.innerHTML = '';

      Object.keys(meetings).forEach(
        (key) => {
          meetingsListElm.appendChild(
            generateMeetingsListItem(meetings[key])
          );
        }
      );
    });
}

function createMeeting() {
  webex.meetings.create(createMeetingDestinationElm.value)
    .then((meeting) => {
      if (meetingsListElm.childElementCount === 0) {
        meetingsListElm.innerHTML = '';
      }

      meetingsListElm.appendChild(
        generateMeetingsListItem(meeting)
      );
    });
}

function joinMeeting(meetingId) {
  const meeting = webex.meetings.getAllMeetings()[meetingId];

  if (!meeting) {
    throw new Error(`meeting ${meetingId} is invalid or no longer exists`);
  }

  meeting.join({
    pin: meetingsJoinPinElm.value,
    moderator: meetingsJoinModeratorElm.checked,
    moveToResource: false
    // resourceId: meetingsJoinDeviceElm.value // Add this after the devices section is ready
  })
    .then(() => {
      meetingsCurrentDetailsElm.innerHTML = meeting.destination ||
        meeting.sipUri ||
        meeting.id;

      meetingsLeaveElm.onclick = () => leaveMeeting(meeting.id);
    });
}

function addMedia() {
  // This method will be filled when generating the Meeting Controls Sources
  // are implemented.
}

function leaveMeeting(meetingId) {
  if (!meetingId) {
    return;
  }

  const meeting = webex.meetings.getAllMeetings()[meetingId];

  if (!meeting) {
    throw new Error(`meeting ${meetingId} is invalid or no longer exists`);
  }

  meeting.leave()
    .then(() => {
      meetingsCurrentDetailsElm.innerHTML = 'Not currently in a meeting';
    });
}
